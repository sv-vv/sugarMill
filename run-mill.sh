#!/bin/bash
#
# Setup script for development
#
# It installs a developer instance of a Sugar project, runs custom post-setup scripts
# (to populate the database, for example) and initializes a Git repository in the
# project directory
#

#
# These variables must be set by the caller
# $HERE is the directory where the custom configuration is located
HERE=${HERE:?}
# $CODE is the directory where this file is located (it should be $HERE/vendor/sv-vv/sugar-mill)
CODE=${CODE:-$HERE/vendor/sv-vv/sugar-mill}

#
# Configuration variables
#

#
# Programs
NUSIM=/usr/local/bin/nusim
#
# Sample database-specific tools (only the one used by database type $DB_TYPE is needed)
#SQLPLUS=/usr/bin/sqlplus64
#MYSQL_CLIENT=/bin/mysql

#
# Input paths
REPO=/var/www/html/Mango

# This must be the same as `webserver.root' in the Nusim configuration (`app/config/parameters_private.yml')
BASE=/var/www/html

#
# Site URL components: host name and path
CRM_HOST=local-instance.dev
CRM_PATH=/project

#
# Output path; this is where the instance is installed
DEST="$BASE/project"
# Arhive: move here the existing installation (if any) for backup purposes
ARCHIVE="$BASE/archive"

#
# Instance configuration
INSTANCE=client-name
FLAVOR=ult
VERSION=7.7.1.0
# Database connection (Oracle)
DB_TYPE=oci8
DB_USER=
DB_PASS=
DB_HOST=localhost
DB_PORT=1521
DB_NAME=
# Admin user
ADMIN_USER=admin
ADMIN_PASS=admin

#
# Put the demo license key in config.sh or your installation won't complete
LICENSE_KEY=


# Export some variables; they might be needed by the post-install scripts
export DATA DEST


#########################################################################
# Script internals

#
# Time tracking
START_TS=
NUSIM_END_TS=
FIXUP_END_TS=
GIT_END_TS=

#
# Helper function
# Format a number of seconds as "[m]:ss"
# @param int $1 the number of seconds to format
function fmtTime () {
    MIN=$(($1/60))
    SEC=$(($1-60*${MIN}))
    printf "%d:%02d" ${MIN} ${SEC}
}


#########################################################################
# The implementation
#

#
# Load the database library depending on the value of `$DB_TYPE`
#
function load_db_library() {
    case "$DB_TYPE" in
        "oci8")
            . ${CODE}/db/oracle.sh
        ;;
        "mysql")
            . ${CODE}/db/mysql.sh
        ;;
        *)
            echo "Unknown or empty DB_TYPE ($DB_TYPE). Cannot continue."
            exit
        ;;
    esac
}


#
# Load the custom configuration from file `config.sh`
#
function load_config() {
    local FILE=${HERE}/config.sh

    if [ -f "$FILE" ]; then
        . ${FILE}
        echo "Configuration loaded from \`$FILE'."
    else
        echo "The configuration file \`$FILE' does not exist. Cannot continue."
        echo "Use \`$FILE.dist' to create a new configuration file."
        echo "Set the needed values in it then run \`$(basename $0)' again."
        return 1
    fi

    # Make sure some variables cannot be modified by config.sh
    DATA="$HERE/post-install"

    return 0
}

#
# Display the current configuration parameters
#
function show_config() {
    echo "The configuration:"
    echo '  - Mango path    ($REPO)   : '${REPO}
    echo '  + instance path ($DEST)   : '${DEST}
    echo '  * archive path  ($ARCHIVE): '${ARCHIVE}
    echo "  + Instance  : $INSTANCE/$FLAVOR/$VERSION"
    echo -n "  * Database  : "; database_url
    echo "  + Admin user: $ADMIN_USER/$ADMIN_PASS"
}

#
# Check the status of the Mango repository
# Return error codes when the working tree is not clean
#
function check_mango_status() {
    cd "$REPO"

    echo "Checking the status of Mango repository..."
    if [ -n "$(git status --short)" ]; then
        echo "The Mango working tree is not in a clean state."
        echo "Stash, commit or reset it and try again."

        cd - &>/dev/null
        return 1
    fi

    MANGO_HASH=$(git rev-parse --short HEAD)
    MANGO_BRANCH=$(git rev-parse --abbrev-ref HEAD)
    MANGO_BRANCH=${MANGO_BRANCH:='N/A'}

    echo "Will install commit $MANGO_HASH (branch $MANGO_BRANCH)"
    cd - &>/dev/null
    return 0
}

#
# Prepare the nusim command line and run it
#
function install_instance() {
    local CMD="$NUSIM\
        install:developer --debug \
        --install-server $CRM_HOST --deployed-server $CRM_HOST --repo-path $REPO \
        --instance $INSTANCE --sugar-flavor $FLAVOR --sugar-version $VERSION \
        --db-type $DB_TYPE --db-user $DB_USER --db-pass $DB_PASS --db-host $DB_HOST --db-name $DB_NAME --db-port $DB_PORT \
        --license-key $LICENSE_KEY \
        --admin-user-name $ADMIN_USER --admin-password $ADMIN_PASS \
    "

    echo "Running nusim... "
    echo "> "${CMD}

    if ${CMD}; then
        echo "Done."
        return 0
    else
        echo "Nusim failed."
        echo "See the file \`/tmp/nusim/nusim.log' for its output."
        echo "See the file \`$BASE/$INSTANCE/$FLAVOR/install.log' generated by the silent installer."
        return 1
    fi
}

#
# Backup the existing instance (if any).
# Use the date&time of the backed up instance to name it into the archive
#
function backup_old_instance() {
    if [ -d "$DEST" ]; then
        mkdir -p "$ARCHIVE"
        local PREV="$ARCHIVE/$(date +%Y%m%d-%H%M -d @$(stat --format %Y ${DEST}))"
        echo "Backing up the existing instance to \`$PREV'."
        rm -rf "$PREV"
        mv "$DEST" "$PREV"
    else
        echo "The destination directory \`$DEST' does not exist. There is nothing to backup."
    fi
}

#
# Move the instance to its final destination (optional), enable developerMode in `config.php'
#
function fixup_instance_code() {
    # Move the instance from the directory where Nusim generated it to its final destination, if different
    if [ "$DEST" != "$BASE/$INSTANCE/$FLAVOR" ]; then
        rm -rf "$DEST"
        mv "$BASE/$INSTANCE/$FLAVOR" "$DEST"
        rmdir "$BASE/$INSTANCE"
    fi

    # Fixup the site URL
    local CRM_PATH=${CRM_PATH%%/}
    sed -i.bak 's#RewriteBase.*$#RewriteBase '${CRM_PATH}'#' "$DEST/.htaccess"
    echo "\$sugar_config['site_url'] = 'http://$CRM_HOST$CRM_PATH/';" >> "$DEST/config_override.php"
    # Fix any custom URLs generated in "config_override.php"
    sed -i.bak "s#\(\$sugar_config\['.*'\]\s*=\s*'http://$CRM_HOST\)/$INSTANCE/$FLAVOR#\1$CRM_PATH#" "$DEST/config_override.php"

    # portal2/config.js contains a JSON; all backslashes are escaped (doubled) in JSON
    sed -i.bak 's#http:\\/\\/'${CRM_HOST}'\\/'${INSTANCE}'\\/'${FLAVOR}'#http:\\/\\/'${CRM_HOST}'\\'${CRM_PATH}'#g' "$DEST/portal2/config.js"

    # Enable the developer mode
    echo "\$sugar_config['developerMode'] = true;" >> "$DEST/config_override.php"

    # Set the commit hash as build number (to be displayed in the About page)
    sed -i.bak "s#\(\$sugar_build\s*=\s*\)'.*'#\1'[commit $MANGO_HASH; branch $MANGO_BRANCH]'#g" "$DEST/sugar_version.php"
}


###########
# Helpers
function run_sql_script() {
    local script="$1"

    echo "=== ${script##*/}: ==="

    echo "function \`$0' must be re-implemented by the database driver (DB_TYPE=$DB_TYPE)."
    exit 4
}

function run_php_script() {
    local script="$1"
    local base=${script##*/}

    echo "=== $base ==="

    # The current directory must be the instance directory in order to find the included files
    # However, the script can be anywhere on the disk, as long as it is invoked using its complete name
    cd "$DEST"
    php -f "$script"
    cd - &>/dev/null
}

function run_sh_script() {
    local script="$1"

    echo "=== ${script##*/}: ==="
    cd "$DEST"
    $SHELL "$script"
    cd - &>/dev/null
}
# /Helpers
###########

#
# Run post-install scripts to populate the database, set some default settings etc
#
function run_post_install_scripts() {
    for s in ${DATA}/*; do
        # Skip directories
        if [ ! -f "$s" ]; then continue; fi

        case .${s##*.} in
            ".sql")
                run_sql_script "$s"
            ;;

            ".php")
                run_php_script "$s"
            ;;

            ".sh")
                run_sh_script "$s"
            ;;
        esac
    done
}

#
# Turn the instance into a Git repository, for development. Create the initial commit, configure the repo.
#
function create_git_repo() {

    ## Copy the .gitignore file
    if [ -f "$DATA/git-ignore.txt" ]; then
        cp "$DATA/git-ignore.txt" "$DEST/.gitignore"
        echo "The \`.ignore' file was copied."
    else
        echo "The files \`ignore.txt' was not found in \`$DATA'. Using the example file instead."
        cp "$CODE/examples/git-ignore.txt" "$DEST/.gitignore"
    fi

    # Create a Git repository in the instance directory to be used for development
    cd "$DEST"
    git init

    # Local customization of the repository
    # Ignore backup files and vim temporary files
    echo << END >> .git/info/exclude

# Added by sugarMill
*.bak
*.swp
END

    # Put the code into the Git repository
    git add .
    git commit -q -m "Fresh installation of commit $MANGO_HASH (branch $MANGO_BRANCH); DB_USER=$DB_USER"

    # Allow forced pushes (this is a working tree, after all)
    git config receive.denyCurrentBranch warn
}

#
# Display the location of the instance and the running time(s)
#
function show_summary() {

    # Report
    echo "======================================================================"
    echo "The instance was generated in \`$DEST'"
    echo "It can be accessed at: \`http://$CRM_HOST$CRM_PATH/'"
    echo
    # Report the times
    echo "Nusim time: $(fmtTime $(($NUSIM_END_TS-$START_TS))) minutes."
    echo "Fixup time: $(fmtTime $(($FIXUP_END_TS-$NUSIM_END_TS))) minutes."
    echo "Git   time: $(fmtTime $(($GIT_END_TS-$FIXUP_END_TS))) minutes."
    echo "Total time: $(fmtTime $(($GIT_END_TS-$START_TS))) minutes."
}


function main() {
    # Preparations
    START_TS=$(date +%s)
    if ! load_config; then
        exit 1
    fi

    load_db_library
    show_config
    if ! check_mango_status; then
        exit 2
    fi

    # The actual installation (powered by Nusim)
    if ! install_instance; then
        exit 3
    fi
    NUSIM_END_TS=$(date +%s)

    # Backup the existing instance, if any
    backup_old_instance

    # Prepare the instance for development and pre-populate the database
    fixup_instance_code
    run_post_install_scripts
    FIXUP_END_TS=$(date +%s)

    # Put the code into a Git repository (it helps the development and the generation of patches)
    create_git_repo
    GIT_END_TS=$(date +%s)

    # That's all, folks!
    show_summary
}


#
# Let's go!
main


# This is the end of file
